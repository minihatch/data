#include <iostream>
#include <climits>
using namespace std;

class tree
{
	int a[20][20],l,u,w,i,j,v,e,visited[20];
public:
	void input();
	void display();
	void minimum();
};

void tree::input()
{
	cout<<"Enter the no. of branches: ";
	cin>>v;

	for(i=0;i<v;i++)
	{
		visited[i]=0;
		for(j=0;j<v;j++)
		{
			a[i][j]=INT_MAX;
		}
	}

	cout<<"\nEnter the no. of connections: ";
	cin>>e;

	for(i=0;i<e;i++)
	{
		cout<<"Enter the end branches of connections:  "<<endl;
		cin>>l>>u;
		cout<<"Enter the phone company charges for this connection:  ";
		cin>>w;
		a[l-1][u-1]=a[u-1][l-1]=w;
	}
}

void tree::display()
{
	cout<<"\nAdjacency matrix:";
	for(i=0;i<v;i++)
	{
		cout<<endl;
		for(j=0;j<v;j++)
		{
			cout<<a[i][j]<<"   ";
		}
		cout<<endl;
	}
}
void tree::minimum() {
    int p = 0, q = 0, total = 0, min;
    int i, j;

    visited[0] = 1; // Assuming node 1 is the starting point (0-indexed)

    for (int count = 0; count < v - 1; count++) {
        min = INT_MAX;

        for (i = 0; i < v; i++) {
            if (visited[i] == 1) {
                for (j = 0; j < v; j++) {
                    if (visited[j] != 1 && a[i][j] != 0 && a[i][j] < min) {
                        min = a[i][j];
                        p = i;
                        q = j;
                    }
                }
            }
        }

        if (min == INT_MAX) {
            cout << "Graph is disconnected. MST not possible.\n";
            return;
        }

        visited[q] = 1;
        total += min;
        cout << "Minimum cost connection is " << (p + 1) << " -> " << (q + 1) << " with charge: " << min << endl;
    }
    cout << "The minimum total cost of connections of all branches is: " << total << endl;
}

int main()
{
	int ch;
	tree t;
	do
	{
		cout<<"==========PRIM'S ALGORITHM================="<<endl;
		cout<<"\n1.INPUT\n \n2.DISPLAY\n \n3.MINIMUM\n"<<endl;
		cout<<"Enter your choice :"<<endl;
		cin>>ch;
	
	switch(ch)
	{	
	case 1: cout<<"*******INPUT YOUR VALUES*******"<<endl;	
		t.input();
		break;

	case 2: cout<<"*******DISPLAY THE CONTENTS********"<<endl;
		t.display();
		break;

	case 3: cout<<"*********MINIMUM************"<<endl;
		t.minimum();
		break;
	}
	
	}while(ch!=4);
	return 0;
}

This C++ code implements **Primâ€™s Algorithm** to find the **Minimum Spanning Tree (MST)** of a **graph represented using an adjacency matrix**. It simulates the case of minimizing phone company charges between branches.

---

### âœ… **Program Title:**

**Primâ€™s Algorithm** â€“ Find the Minimum Cost to Connect All Branches

---

### âœ… **Objective:**

To determine the **minimum total cost** required to connect all branches (nodes) using **Primâ€™s algorithm**, which constructs a Minimum Spanning Tree (MST) from a weighted, undirected graph.

---

### âœ… **Key Concepts:**

* **Graph Representation**: Adjacency matrix (`a[20][20]`)
* **Primâ€™s Algorithm**: Greedy approach to find MST
* **Visited Array**: Keeps track of included vertices in MST

---

### âœ… **Breakdown of the Code:**

#### ðŸ”· Class `tree`:

Contains the graph and all related operations.

```cpp
class tree {
    int a[20][20];      // adjacency matrix (INT_MAX = no edge)
    int l, u, w, i, j;  // for looping and input
    int v, e;           // number of vertices and edges
    int visited[20];    // tracks visited nodes for MST
public:
    void input();
    void display();
    void minimum();     // Prim's Algorithm
};
```

---

### ðŸ”· `void input()`

* Accepts number of branches (`v`)
* Initializes `a[i][j] = INT_MAX` (used instead of 0 to represent no connection)
* Takes `e` edges (connections), and fills the matrix symmetrically (`undirected graph`)

**Sample Input:**

```
Enter the no. of branches: 4
Enter the no. of connections: 5
Enter the end branches of connections:
1 2
Enter charges: 3
1 3
Enter charges: 2
...
```

---

### ðŸ”· `void display()`

* Displays the adjacency matrix
* Each cell represents the cost (phone company charge) to connect two branches

---

### ðŸ”· `void minimum()` â€“ **Primâ€™s Algorithm**

Performs the following:

1. Starts from node 0 (branch 1)
2. Iteratively selects the **minimum weight edge** connecting a visited node to an unvisited node
3. Adds that node to the MST
4. Repeats until all nodes are connected

**Core logic:**

```cpp
for (count = 0; count < v - 1; count++) {
    for (i = 0; i < v; i++) {
        if (visited[i]) {
            for (j = 0; j < v; j++) {
                if (!visited[j] && a[i][j] < min) {
                    // Choose the least cost edge
                }
            }
        }
    }
}
```

If all nodes cannot be connected, it prints:

```
Graph is disconnected. MST not possible.
```

---

### âœ… **`main()` Function**

* Menu-driven interaction with options:

  1. **Input** â€“ Accepts graph details
  2. **Display** â€“ Shows adjacency matrix
  3. **Minimum** â€“ Runs Primâ€™s algorithm and shows MST
  4. Exit (loop ends when choice is not 1â€“3)

