#include <iostream>
using namespace std;
void min_heapify(int *a,int i,int n)
{
    int j, temp;
    temp = a[i];
    j = 2 * i;
    while (j <= n)
    {
        if (j < n && a[j+1] < a[j])
            j = j + 1;
        if (temp < a[j])
            break;
        else if (temp >= a[j])
        {
            a[j/2] = a[j];
            j = 2 * j;
        }
    }
    a[j/2] = temp;

}
void max_heapify(int *a,int i,int n)
{
    int j, temp;
    temp = a[i];
    j = 2 * i;
    while (j <= n)
    {
        if (j < n && a[j+1] > a[j])
            j = j + 1;
        if (temp > a[j])
            break;
        else if (temp <= a[j])
        {
            a[j/2] = a[j];
            j = 2 * j;
        }
    }
    a[j/2] = temp;
    return;
}
void build_minheap(int *a, int n)
{
    int i;
    for(i = n/2; i >= 1; i--)
    {
        min_heapify(a,i,n);
    }
}
void build_maxheap(int *a, int n)
{
    int i;
    for(i = n/2; i >= 1; i--)
    {
        max_heapify(a,i,n);
    }
}
int main()
{
    int n, i, x,ch;
    char choice;
    cout<<"\n Enter number of students : ";
    cin>>n;
    int a[20];
    for (i = 1; i <= n; i++)
    {
        cout<<"Enter mark of student "<<i<<" : ";
        cin>>a[i];
    }
    do
    {
        cout<<"\n 1.MIN Heap \n 2.MAX Heap \n 3. Exit";
    	cout<<"\n  Enter the choice : ";
    	cin>>ch;
    	switch(ch)
    	{
    		case 1:
    			   build_minheap(a, n);
  			       cout<<"Min Heap\n";
   			       for (i = 1; i <= n; i++)
   			       {
        			cout<<a[i]<<endl;
                   }
    			   break;
    		case 2:
    			   build_maxheap(a, n);
  			       cout<<"Max Heap\n";
   			       for (i = 1; i <= n; i++)
   			       {
        			cout<<a[i]<<endl;
                   }
    			   break;
            case 3:break;
    	}

    }while(ch!=3);
}

This C++ program demonstrates how to build and display **min-heaps** and **max-heaps** using an array of student marks. Let's break it down step by step.

---

### ✅ **Overview of Heaps**

* A **heap** is a complete binary tree stored in an array.
* **Min-Heap**: Parent node is **less than or equal** to its children.
* **Max-Heap**: Parent node is **greater than or equal** to its children.

In both heaps, the root (index 1) represents:

* The **minimum** value in a **min-heap**.
* The **maximum** value in a **max-heap**.

---

### 🔧 **Functions**

#### 1. `min_heapify(int *a, int i, int n)`

* Purpose: Adjusts the subtree rooted at index `i` to satisfy the **min-heap** property.
* `temp` stores the value at index `i`.
* Compares with children (`2*i`, `2*i+1`) and percolates the smaller child up.
* Places `temp` at the correct position.

#### 2. `max_heapify(int *a, int i, int n)`

* Similar to `min_heapify`, but for **max-heap**.
* Compares and pushes the **larger** child up.

#### 3. `build_minheap(int *a, int n)`

* Applies `min_heapify` from the last non-leaf node (`n/2`) up to root (1).
* Builds the min-heap from a bottom-up manner.

#### 4. `build_maxheap(int *a, int n)`

* Applies `max_heapify` from `n/2` to `1` to create a max-heap.

---

### 👨‍💻 **main() Function**

1. **Input**:

   * Takes number of students `n`.
   * Takes `n` student marks into array `a[1...n]` (index starts from 1).

2. **Menu Loop**:

   * Presents a menu:

     1. Build and display **Min Heap**
     2. Build and display **Max Heap**
     3. Exit
   * Executes corresponding heap build and prints the heap array.

---

### 📌 Key Notes

* The array index starts from `1`, not `0` (heap property assumes 1-based index).
* The program uses an iterative version of heapify.
* It does **not perform insertions or deletions**, only builds heap from an array.

---

### 🧪 Example:

**Input:**

```
n = 5
Marks = 55 70 40 90 60
```

**Option 1 (Min Heap):**

```
40
55
70
90
60
```

**Option 2 (Max Heap):**

```
90
70
40
55
60
```

---

Would you like to add insertion/deletion operations or visualize how the heap is structured as a tree?


