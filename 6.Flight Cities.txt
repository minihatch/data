#include<iostream>
#include<stdlib.h>
#include<string.h>
using namespace std;
struct node
{   string vertex;
    int time;
    node *next;
};   
class adjmatlist
{    
     int m[10][10],n,i,j; 
     char ch;  
     string v[20];   
     node *head[20];  
     node *temp=NULL;

     public:
     adjmatlist()
     {      for(i=0;i<20;i++)
            {    
                head[i]=NULL;  
            }
     }          
     void getgraph();
     void adjlist();
 
     void displaym();
     void displaya();
};
void adjmatlist::getgraph()
{
   cout<<"\n enter no. of cities(max. 20)";
   cin>>n;
   cout<<"\n enter name of cities";
   for(i=0;i<n;i++)
     cin>>v[i];         
   for(i=0;i<n;i++)
   { 
      for(j=0;j<n;j++)
      {  cout<<"\n if path is present between city "<<v[i]<<" and "<<v[j]<<" then press enter y otherwise n "; 
         cin>>ch;
         if(ch=='y')
         { 
           cout<<"\n enter time required to reach city "<< v[j]<<" from "<< v[i]<<" in minutes";
           cin>>m[i][j];
         }
         else if(ch=='n')
         {  m[i][j]=0;  }
         else
         { cout<<"\n unknown entry";  }
      }
   }       
      adjlist();
        
}
void adjmatlist::adjlist()
{      cout<<"\n ****";
       for(i=0;i<n;i++)
       {  node *p=new node;
          p->next=NULL;
          p->vertex=v[i];
          p->time=m[i][j];
          head[i]=p;      
          cout<<"\n"<<head[i]->vertex;
       }
     
       for(i=0;i<n;i++)
       {  for(j=0;j<n;j++)
          {
                   if(m[i][j]!=0)
                   {      
                         node *p=new node;
                         p->vertex=v[j];
                         p->time=m[i][j];
                         p->next=NULL;
                         if(head[i]->next==NULL)
                         {  
                             head[i]->next=p;   
                         }
                         else
                         {  
                             temp=head[i];
                             while(temp->next!=NULL)
                             {   
                                temp=temp->next;  
                             }
                             temp->next=p;
                         }

                   }

          }
       }  
     
}
void adjmatlist::displaym()
{    cout<<"\n";
     for(j=0;j<n;j++)
     {  cout<<"\t"<<v[j];  }

     for(i=0;i<n;i++)
     {  cout<<"\n "<<v[i];
        for(j=0;j<n;j++)
        {   cout<<"\t"<<m[i][j];
        }
            cout<<"\n";
     }
}   
void adjmatlist::displaya()
{     
       cout<<"\n adjacency list is";
     
       for(i=0;i<n;i++)
       { 
                 
             
                         if(head[i]==NULL)
                         {   cout<<"\n adjacency list not present";  break;   }
                         else
                         { 
                            cout<<"\n"<<head[i]->vertex;
                         temp=head[i]->next;
                         while(temp!=NULL)
                         {  cout<<"-> "<<temp->vertex;
                            temp=temp->next;  }
                            
                         }

                  

         
       }
     
         cout<<"\n path and time required to reach cities is";
       
       for(i=0;i<n;i++)
       { 
                 
             
                         if(head[i]==NULL)
                         {   cout<<"\n adjacency list not present";  break;   }
                         else
                         { 
                           
                         temp=head[i]->next;
                         while(temp!=NULL)
                         {  cout<<"\n"<<head[i]->vertex;
                            cout<<"-> "<<temp->vertex<<"\n   [time required: "<<temp->time<<" min ]";
                            temp=temp->next;  }
                            
                         }
       }
}
int main()
{  
   int m;   
   adjmatlist a;

   while(1)
   {
   cout<<"\n\n enter the choice";
   cout<<"\n 1.enter graph";
   cout<<"\n 2.display adjacency matrix for cities";
   cout<<"\n 3.display adjacency list for cities";
   cout<<"\n 4.exit";
   cin>>m;
  
        switch(m)
       {            case 1: a.getgraph();
                                    break;
                    case 2: a.displaym();
                                   break;
                          
                    case 3: a.displaya();
                                   break;
                    case 4: exit(0);
                
                            default:  cout<<"\n unknown choice";
         }
    }
    return 0;
}  

Here's an **examiner-style explanation** of the given C++ code that demonstrates a **graph representation using both an adjacency matrix and an adjacency list**:

---

### ✅ **Program Title:**

Graph Representation of Flight Connections Between Cities Using Adjacency Matrix and Adjacency List (C++)

---

### ✅ **Objective:**

To implement a system that allows:

* Input of cities and their travel connections (graph)
* Representation using both:

  * **Adjacency Matrix**
  * **Adjacency List**
* Display of both representations
* Display of travel time between cities

---

### ✅ **Data Structures Used:**

1. **Adjacency Matrix** (`m[10][10]`):

   * A 2D array representing if a direct path (edge) exists between two cities (`1` if exists, `0` otherwise).
   * It also stores **time in minutes** as weights.

2. **Adjacency List** (`head[20]`):

   * An array of linked lists where each node contains:

     * `vertex` (destination city name)
     * `time` (weight/time to reach)
     * `next` (pointer to the next adjacent city)

---

### ✅ **Key Components:**

#### 1. **`struct node`**:

Defines each node in the adjacency list.

```cpp
struct node {
    string vertex;
    int time;
    node* next;
};
```

#### 2. **Class `adjmatlist`**:

Contains the matrix, list, city names, and methods to manage the graph.

* **Data Members**:

  * `m[10][10]`: adjacency matrix
  * `v[20]`: stores city names
  * `head[20]`: array of linked lists (adjacency list)
  * `n`: number of cities

---

### ✅ **Functions Explained:**

#### 1. **`getgraph()`**

* Takes number of cities and names as input
* Asks user if a direct path exists between each pair of cities
* If yes, asks for time in minutes
* Fills the adjacency matrix accordingly
* Calls `adjlist()` to convert matrix into a linked list

---

#### 2. **`adjlist()`**

* Converts the adjacency matrix into an adjacency list
* For each city:

  * Creates a head node (city name)
  * Adds connected cities as linked list nodes with corresponding travel times

---

#### 3. **`displaym()`**

* Prints the adjacency matrix in a tabular form with city names as headers
* Shows travel time (or 0 if no direct path)

---

#### 4. **`displaya()`**

* Prints the adjacency list:

  * Each city followed by its adjacent cities using `->` format
  * Shows travel time between each pair

---

### ✅ **`main()` Function:**

* Menu-driven interface:

  1. Enter graph
  2. Display adjacency matrix
  3. Display adjacency list
  4. Exit







