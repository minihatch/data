#include<iostream>
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
using namespace std;
class node
{
public:
        char keyword[20];
        char meaning[20];
        node *left;
        node *right;
        int ht;
        node()
        {
             strcpy(meaning,"");
             strcpy(keyword,"");
        }
};

class tree
{
    private:
    node *root;
    tree *t;
    public:
    tree()
    {
        root=NULL;

    }
    void insert1(char key[20],char mean[20])
    {
      
        root=insert(root,key,mean);
    }
    node *insert(node *T,char word[20],char mean[20]);
    void preorder(node *);
    void inorder(node *);
    void postorder(node *);
    void display();
    void modify(node *);
    void delet();
    node * In_Succ(node *);
    void ascending()
    {
        inorder(root);
    }
    void descending(node *);
    void search1(node *);
    void search()
    {
        search1(root);
    }
    void max_compare(node *);
    node *Rotate_Left(node *T);
    node *Rotate_Right(node *T);
    int BF(node *T);
    int height(node *T);
};

int tree::BF(node*T)
{
    int lh,rh;
    if(T==NULL)
    return 0;
    else
    {
        if(T->left==NULL)
        {
            lh=0;
        }
        else
        {
            lh=1+T->left->ht;
        }
        if(T->right==NULL)
        {
            rh=0;
        }
        else
        {
            rh=1+T->right->ht;
        }
    }
    return(lh-rh);
}

node *tree::Rotate_Right(node*x)
{
    node*y;
    y=x->left;
    x->left=y->right;
    y->right=x;
    x->ht=height(x);
    y->ht=height(y);
    return(y);
}

node *tree::Rotate_Left(node*T)
{
    node*temp;
    temp=T->right;
    T->right=temp->left;
    temp->left=T;
    T->ht=height(T);
    temp->ht=height(temp);
    return(temp);
}
int tree::height(node*T)
{
    int left_height,right_height;
    if(T==NULL)
    {
        return(0);
    }
    if(T->left==NULL)
    {
        left_height=0;
    }
    else
    {
        left_height=1+(T->left->ht);
    }
    if(T->right==NULL)
    {
        right_height=0;
    }
    else
    {
        right_height=1+(T->right->ht);
    }
    if(left_height>right_height)
        return(left_height);
    else
        return(right_height);
}


node *tree::insert(node *T,char word[20], char mean[20])
{
    if(T==NULL)
    {
        T=new node();
    }

    if(strcmp(T->keyword,"")==0)
    {
        strcpy(T->keyword,word);
        strcpy(T->meaning,mean);
        T->left=NULL;
        T->right=NULL;
    }
    else
    {
        if(strcmp(word,T->keyword)>0)
        {
            T->right=insert(T->right,word,mean);

            if(BF(T)==-2)
            {
                if(strcmp(word,T->right->keyword)>0)
                {
                    T=Rotate_Left(T);
                }
                else
                {
                    T->right=Rotate_Right(T->right);
                    T=Rotate_Left(T);
                }
            }

        }
        else
        {
            if(strcmp(word,T->keyword)<0)
            {
                T->left=insert(T->left,word,mean);

                if(BF(T)==2)
                {
                    if((strcmp(word,T->left->keyword)<0))
                    {
                        T=Rotate_Right(T);
                    }
                    else
                    {
                        T->left=Rotate_Left(T->left);
                        T=Rotate_Right(T);
                    }
                }
            }
        }
    }
    T->ht=height(T);

    return(T);
}

void tree::modify(node *head)
{
    char data[20],mean[20],flag;
    node *temp=head;
    cout<<"\n Enter the word for which u want to modify the meaning";
    cin>>data;
    cout<<"\n Enter the new meaning";
    cin>>mean;
    while(temp!=NULL)
    {
          if(strcmp(temp->keyword,data)==0)
          {
        strcpy(temp->meaning,mean);
        flag=1;
        break;
          }

          if(strcmp(temp->keyword,data)<0)
         temp=temp->right;
          else
         temp=temp->left;
   }

     if(flag==1)
     {
        cout<<"\n The keyword is____" <<temp->keyword<<"___ and its modified meaning is-"<<temp->meaning<<"\n";
     }
     else
     {
        cout<<"\n The word" <<data<<"isnot present in the BST \n";
     }
     display();

}

void tree::delet()
{
   node *temp,*parent,*x,*in_succ;
   temp=root;      //'head' is pointer to root node
   char data[20];
   int flag;
   cout<<"\n Enter the word u want to delete";
   cin>>data;
   parent=temp;
   while(temp!=NULL)
   {
      if(strcmp(temp->keyword,data)==0)
      {
    flag=1;
    break;
      }

      if(strcmp(temp->keyword,data)<0)
      {
    parent=temp;
    temp=temp->right;
      }
      else
     {
        parent=temp;
        temp=temp->left;
     }
   }
     if(flag!=1)
     {
        cout<<"\n The word--" <<data<<"--isnot present in the BST to delete\n";
     }
     else
     {
        if(temp->left==NULL && temp->right==NULL)
        {
            if(parent->left==temp)
            {
                parent->left=NULL;
                delete temp;
            }
            else if(parent->right==temp)
            {
                parent->right=NULL;
                delete temp;
            }
        }
        else if(temp->left!=NULL && temp->right==NULL)
        {
            if(parent->left==temp)
            {
                parent->left=temp->left;
                delete temp;
            }
            else if(parent->right==temp)
            {
                parent->right=temp->left;
                delete temp;
            }
        }
        else if(temp->right!=NULL && temp->left==NULL)
        {
            if(parent->left==NULL)
            {
                parent->left=temp->right;
            }
            else if(parent->right==temp)
            {
                parent->right=temp->right;
            }
        }
        else if(temp->left!=NULL && temp->right!=NULL)
        {
            parent=temp;
            x=temp->right;
            in_succ=In_Succ(parent);
            strcpy(parent->keyword,in_succ->keyword);
            strcpy(parent->meaning,in_succ->meaning);
            if(x->left!=NULL)
            {
                if(x->left->left==NULL)
                {
                    x->left=x->left->right;
                }
                else
                {
                    x->left->left=x->left->left->right;
                }
            }
            else
            {
                parent->right=x->right;
            }
        }
     cout<<"\n The node has been deleted.\n";
      }
}

node *tree::In_Succ(node *root)
{
    node *trav;
    trav=root;
    trav=trav->right;
    while(trav->left!=NULL)
    {
        trav=trav->left;
    }
    return trav;
}

void tree::preorder(node *root)
{
    if(root!=NULL)
    {
        cout<<endl<<(root)->keyword<<"   !   "<<(root)->meaning;
            preorder((root)->left);
            preorder((root)->right);

    }
}


void tree::inorder(node *root)
{
    if(root!=NULL)
    {
        inorder((root)->left);
        cout<<endl<<(root)->keyword<<"   !   "<<(root)->meaning;
        inorder((root)->right);

    }
}

void tree::descending(node *root)
{
    if(root!=NULL)
    {
        descending((root)->right);
        cout<<endl<<(root)->keyword<<"   !   "<<(root)->meaning;
        descending((root)->left);

    }
}


void tree::postorder(node *root)
{
    if(root!=NULL)
    {
        postorder((root)->left);
        postorder((root)->right);
        cout<<endl<<(root)->keyword<<"   !   "<<(root)->meaning;
    }
}


void tree::display()
{
    int ch;
    do
    {
       cout<<endl<<"Enter ur choice"<<endl;
       cout<<"1.Pre-order"<<endl;
       cout<<"2.In-order"<<endl;
       cout<<"3.Post-order"<<endl;
       cout<<"4.Modify    "<<endl;
       cout<<"5.Search"<<endl;
       cout<<"6.Delete \n";
       cout<<"7.Ascending order \n";
       cout<<"8.Descending order \n";
       cout<<"9.Max Comparisons\n";
       cout<<"0.Exit"<<endl;
       cin>>ch;
       switch(ch)
       {
           case 1:cout<<"\n KEYWORD"<<"   !   "<<"MEANING";
                  cout<<"\n_______________________________";
                  preorder(root);
                  break;
           case 2:cout<<"\n KEYWORD"<<"   !   "<<"MEANING";
                  cout<<"\n_______________________________";
                  inorder(root);
                  break;
           case 3:cout<<"\n KEYWORD"<<"   !   "<<"MEANING";
                  cout<<"\n_______________________________";
                  postorder(root);
                  break;
           case 4:modify(root);
                  break;
           case 5:search();
                  break;
           case 6:delet();
                  cout<<"\n Preorder traversal is:\n";
                  cout<<"\n KEYWORD"<<"   !   "<<"MEANING";
                  cout<<"\n_______________________________";
                  preorder(root);
                   break;
           case 7:ascending();
                  break;
           case 8:descending(root);
                  break;
           case 9:max_compare(root);
                  break;
           case 0:exit(0);
           default:cout<<"\n Wrong choice";
       }
    } while(ch!=0);
}

void tree::search1(node *head)       //the function belongs to class 'tree'
{
   node *temp=head;      //'head' is pointer to root node
   char data[20];
   int flag;
   cout<<"\n Enter the word u want to search";
   cin>>data;
   while(temp!=NULL)
   {
      if(strcmp(temp->keyword,data)==0)
      {
         flag=1;
         break;
      }

      if(strcmp(temp->keyword,data)<0)
         temp=temp->right;
      else
         temp=temp->left;
   }

     if(flag==1)
     {
        cout<<"\n The word---" <<data<<"---is present in the BST \n";
     }
     else
     {
        cout<<"\n The word" <<data<<"isnot present in the BST \n";
     }
     display();
}

void tree::max_compare(node *head)       //the function belongs to class 'tree'
{
   node *temp=head;      //'head' is pointer to root node
   char data[20];
   int flag,count=0;
   cout<<"\n Enter the word u want to search";
   cin>>data;
   while(temp!=NULL)
   {
      if(strcmp(temp->keyword,data)==0)
      {
        count++;
        flag=1;
        break;
      }

      if(strcmp(temp->keyword,data)<0)
          temp=temp->right;
      else
          temp=temp->left;
   }

     if(flag==1)
     {
        cout<<"\n The max comparisons for the word:  "<<count<<" \n";
     }
     else
     {
        cout<<"\n The word " <<data<<" isnot present in the BST \n";
     }
     display();
}


int main()
{
  int ans;
    tree b;
    char key[20],mean[20];
    do
    {
    
      cout<<"\nEnter keyword and meaning";
      cin>>key>>mean;
      b.insert1(key,mean);
      cout<<"Want to continue (1/0)";
      cin>>ans;
    }while(ans==1);
    b.display();

    return 0;
}

This C++ code implements a **Dictionary using an AVL Tree**, which is a type of **self-balancing Binary Search Tree (BST)**. Each node stores a keyword and its meaning. AVL trees maintain a balance factor and rotate nodes automatically to keep the tree balanced, which helps ensure fast insertions, deletions, and lookups.

---

### 💡 **Key Features Implemented**

* AVL Tree with height balancing
* Dictionary operations:

  * Insertion
  * Deletion
  * Modification
  * Search
  * Traversals: Preorder, Inorder, Postorder
  * Ascending and Descending display
  * Count of comparisons in search

---

### ✅ **Breakdown of the Code**

---

#### **1. `node` class**

Defines the structure of each AVL tree node:

```cpp
class node {
public:
    char keyword[20];
    char meaning[20];
    node *left, *right;
    int ht;  // height for AVL balancing
};
```

---

#### **2. `tree` class**

Encapsulates the AVL tree operations.

##### Private Members:

* `node* root` – pointer to root node.

##### Important Methods:

* `insert1()` – public wrapper to insert a node.
* `insert()` – recursive AVL insert with balancing.
* `Rotate_Left`, `Rotate_Right` – for balancing AVL tree.
* `BF()` – balance factor of node.
* `height()` – calculate height of node.

---

### ⚙️ **Functional Explanation**

---

#### **Insertion**

```cpp
node* tree::insert(node* T, char word[], char mean[]) {
    ...
    // BST insert
    // Update height
    // Rebalance using rotations if BF is ±2
}
```

* Inserts in BST fashion.
* If imbalance occurs, rotations (LL, RR, LR, RL) fix it.

---

#### **Balancing Rotations**

```cpp
node* Rotate_Left(node* T);
node* Rotate_Right(node* T);
```

* Applied when balance factor (BF) is ±2.

---

#### **Display Traversals**

* `preorder`, `inorder`, `postorder` – standard BST traversals.
* `ascending()` – calls `inorder()` to show sorted keywords.
* `descending()` – reverse inorder traversal.

---

#### **Modification**

```cpp
void modify(node* head);
```

* Searches for the keyword and updates its meaning.

---

#### **Search**

```cpp
void search1(node* head);
```

* Searches for the keyword in the tree.

---

#### **Deletion**

```cpp
void delet();
```

* Deletes a node from the tree:

  * Handles all 3 cases (no child, 1 child, 2 children).
  * Uses **inorder successor** for 2 children case.

---

#### **Maximum Comparisons**

```cpp
void max_compare(node* head);
```

* Counts how many comparisons are needed to find a word.

---

#### **Main Function**

```cpp
int main() {
    ...
    b.insert1(key, mean);  // insert word and meaning
    ...
    b.display();  // show menu
}
```

* Takes user input to build the AVL dictionary.
* Calls `display()` which shows an interactive menu.

---

### 🧪 **Menu Options in `display()`**

1. Pre-order traversal
2. In-order traversal
3. Post-order traversal
4. Modify meaning
5. Search
6. Delete
7. Ascending order
8. Descending order
9. Max comparisons
10. Exit

---

### ✅ **Why AVL Tree?**

* Ensures **O(log n)** performance for search, insert, and delete.
* Avoids degeneration of tree into a list.

---

Would you like a flowchart or diagram to visualize how AVL insertions and rotations work?






